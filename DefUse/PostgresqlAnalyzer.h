//
// Created by yigonghu on 3/19/20.
//
#include <fstream>
#include "llvm/Pass.h"
#include "llvm/IR/Constants.h"
#include "llvm/Analysis/CallGraph.h"
#include <set>

using namespace llvm;

#ifndef STATIC_ANALYZER_POSTGRESQL_CONFIG_H
#define STATIC_ANALYZER_POSTGRESQL_CONFIG_H

typedef struct configurationInfo {
  std::string configuration;
  std::string name;
}ConfigInfo;

static ConfigInfo configInfo[] = {
    {"empty type","empty type"},
    {"allow_system_table_mods","allowSystemTableMods"},
    {"application_name","application_name"},
    {"archive_command","XLogArchiveCommand"},
    {"archive_mode","XLogArchiveMode"},
    {"archive_timeout","XLogArchiveTimeout"},
//    {"array_nulls","Array_nulls"},
//    {"authentication_timeout","AuthenticationTimeout"},
//    {"autovacuum","autovacuum_start_daemon"},
//    {"autovacuum_analyze_scale_factor","autovacuum_anl_scale"},
//    {"autovacuum_analyze_threshold","autovacuum_anl_thresh"},
//    {"autovacuum_freeze_max_age","autovacuum_freeze_max_age"},
//    {"autovacuum_max_workers","autovacuum_max_workers"},
//    {"autovacuum_multixact_freeze_max_age","autovacuum_multixact_freeze_max_age"},
//    {"autovacuum_naptime","autovacuum_naptime"},
//    {"autovacuum_vacuum_cost_delay","autovacuum_vac_cost_delay"},
//    {"autovacuum_vacuum_cost_limit","autovacuum_vac_cost_limit"},
//    {"autovacuum_vacuum_scale_factor","autovacuum_vac_scale"},
//    {"autovacuum_vacuum_threshold","autovacuum_vac_thresh"},
//    {"autovacuum_work_mem","autovacuum_work_mem"},
//    {"backend_flush_after","backend_flush_after"},
//    {"backslash_quote","backslash_quote"},
//    {"bgwriter_delay","BgWriterDelay"},
//    {"bgwriter_flush_after","bgwriter_flush_after"},
//    {"bgwriter_lru_maxpages","bgwriter_lru_maxpages"},
//    {"bgwriter_lru_multiplier","bgwriter_lru_multiplier"},
//    {"block_size","block_size"},
//    {"bonjour","enable_bonjour"},
//    {"bonjour_name","bonjour_name"},
//    {"bytea_output","bytea_output"},
//    {"check_function_bodies","check_function_bodies"},
    {"checkpoint_completion_target","CheckPointCompletionTarget"},
//    {"checkpoint_flush_after","checkpoint_flush_after"},
    {"checkpoint_timeout","CheckPointTimeout"},
//    {"checkpoint_warning","CheckPointWarning"},
//    {"client_encoding","client_encoding_string"},
//    {"client_min_messages","client_min_messages"},
//    {"cluster_name","cluster_name"},
    {"commit_delay","CommitDelay"},
    {"commit_siblings","CommitSiblings"},
    {"config_file","ConfigFileName"},
//    {"constraint_exclusion","constraint_exclusion"},
//    {"cpu_index_tuple_cost","cpu_index_tuple_cost"},
//    {"cpu_operator_cost","cpu_operator_cost"},
//    {"cpu_tuple_cost","cpu_tuple_cost"},
//    {"cursor_tuple_fraction","cursor_tuple_fraction"},
//    {"data_checksums","data_checksums"},
//    {"data_directory","data_directory"},
//    {"data_directory_mode","data_directory_mode"},
//    {"DateStyle","datestyle_string"},
//    {"db_user_namespace","Db_user_namespace"},
    {"deadlock_timeout","DeadlockTimeout"},
//    {"debug_assertions","assert_enabled"},
//    {"debug_pretty_print","Debug_pretty_print"},
//    {"debug_print_parse","Debug_print_parse"},
//    {"debug_print_plan","Debug_print_plan"},
//    {"debug_print_rewritten","Debug_print_rewritten"},
//    {"default_statistics_target","default_statistics_target"},
//    {"default_tablespace","default_tablespace"},
//    {"default_text_search_config","TSCurrentConfig"},
//    {"default_transaction_deferrable","DefaultXactDeferrable"},
//    {"default_transaction_isolation","DefaultXactIsoLevel"},
//    {"default_transaction_read_only","DefaultXactReadOnly"},
//    {"default_with_oids","default_with_oids"},
//    {"dynamic_library_path","Dynamic_library_path"},
//    {"dynamic_shared_memory_type","dynamic_shared_memory_type"},
//    {"effective_cache_size","effective_cache_size"},
//    {"effective_io_concurrency","effective_io_concurrency"},
//    {"enable_bitmapscan","enable_bitmapscan"},
//    {"enable_gathermerge","enable_gathermerge"},
//    {"enable_hashagg","enable_hashagg"},
//    {"enable_hashjoin","enable_hashjoin"},
//    {"enable_indexonlyscan","enable_indexonlyscan"},
//    {"enable_indexscan","enable_indexscan"},
//    {"enable_material","enable_material"},
//    {"enable_mergejoin","enable_mergejoin"},
//    {"enable_nestloop","enable_nestloop"},
//    {"enable_parallel_append","enable_parallel_append"},
//    {"enable_parallel_hash","enable_parallel_hash"},
//    {"enable_partition_pruning","enable_partition_pruning"},
//    {"enable_partitionwise_aggregate","enable_partitionwise_aggregate"},
//    {"enable_partitionwise_join","enable_partitionwise_join"},
//    {"enable_seqscan","enable_seqscan"},
//    {"enable_sort","enable_sort"},
//    {"enable_tidscan","enable_tidscan"},
//    {"escape_string_warning","escape_string_warning"},
//    {"event_source","event_source"},
    {"exit_on_error","ExitOnAnyError"},
//    {"external_pid_file","external_pid_file"},
//    {"extra_float_digits","extra_float_digits"},
//    {"force_parallel_mode","force_parallel_mode"},
//    {"from_collapse_limit","from_collapse_limit"},
//    {"fsync","enableFsync"},
//    {"full_page_writes","fullPageWrites"},
//    {"geqo","enable_geqo"},
//    {"geqo_effort","Geqo_effort"},
//    {"geqo_generations","Geqo_generations"},
//    {"geqo_pool_size","Geqo_pool_size"},
//    {"geqo_seed","Geqo_seed"},
//    {"geqo_selection_bias","Geqo_selection_bias"},
//    {"geqo_threshold","geqo_threshold"},
//    {"gin_fuzzy_search_limit","GinFuzzySearchLimit"},
//    {"gin_pending_list_limit","gin_pending_list_limit"},
//    {"hba_file","HbaFileName"},
//    {"hot_standby","EnableHotStandby"},
//    {"hot_standby_feedback","hot_standby_feedback"},
//    {"huge_pages","huge_pages"},
//    {"ident_file","IdentFileName"},
//    {"idle_in_transaction_session_timeout","IdleInTransactionSessionTimeout"},
//    {"ignore_checksum_failure","ignore_checksum_failure"},
//    {"ignore_system_indexes","IgnoreSystemIndexes"},
//    {"integer_datetimes","integer_datetimes"},
//    {"IntervalStyle","IntervalStyle"},
//    {"is_superuser","session_auth_is_superuser"},
//    {"jit","jit_enabled"},
//    {"jit_above_cost","jit_above_cost"},
//    {"jit_debugging_support","jit_debugging_support"},
//    {"jit_dump_bitcode","jit_dump_bitcode"},
//    {"jit_expressions","jit_expressions"},
//    {"jit_inline_above_cost","jit_inline_above_cost"},
//    {"jit_optimize_above_cost","jit_optimize_above_cost"},
//    {"jit_profiling_support","jit_profiling_support"},
//    {"jit_provider","jit_provider"},
//    {"jit_tuple_deforming","jit_tuple_deforming"},
//    {"join_collapse_limit","join_collapse_limit"},
//    {"krb_caseins_users","pg_krb_caseins_users"},
//    {"krb_server_keyfile","pg_krb_server_keyfile"},
//    {"lc_collate","locale_collate"},
//    {"lc_ctype","locale_ctype"},
//    {"lc_messages","locale_messages"},
//    {"lc_monetary","locale_monetary"},
//    {"lc_numeric","locale_numeric"},
//    {"lc_time","locale_time"},
//    {"listen_addresses","ListenAddresses"},
//    {"lo_compat_privileges","lo_compat_privileges"},
//    {"local_preload_libraries","local_preload_libraries_string"},
    {"lock_timeout","LockTimeout"},
//    {"log_autovacuum_min_duration","Log_autovacuum_min_duration"},
//    {"log_checkpoints","log_checkpoints"},
//    {"log_connections","Log_connections"},
//    {"log_destination","Log_destination_string"},
//    {"log_directory","Log_directory"},
//    {"log_disconnections","Log_disconnections"},
//    {"log_duration","log_duration"},
//    {"log_error_verbosity","Log_error_verbosity"},
//    {"log_executor_stats","log_executor_stats"},
//    {"log_file_mode","Log_file_mode"},
//    {"log_filename","Log_filename"},
//    {"log_hostname","log_hostname"},
//    {"log_line_prefix","Log_line_prefix"},
//    {"log_lock_waits","log_lock_waits"},
//    {"log_min_duration_statement","log_min_duration_statement"},
//    {"log_min_error_statement","log_min_error_statement"},
//    {"log_min_messages","log_min_messages"},
//    {"log_parser_stats","log_parser_stats"},
//    {"log_planner_stats","log_planner_stats"},
//    {"log_replication_commands","log_replication_commands"},
//    {"log_rotation_age","Log_RotationAge"},
//    {"log_rotation_size","Log_RotationSize"},
//    {"log_statement","log_statement"},
//    {"log_statement_stats","log_statement_stats"},
//    {"log_temp_files","log_temp_files"},
//    {"log_timezone","log_timezone_string"},
//    {"log_truncate_on_rotation","Log_truncate_on_rotation"},
//    {"logging_collector","Logging_collector"},
//    {"maintenance_work_mem","maintenance_work_mem"},
//    {"max_connections","MaxConnections"},
//    {"max_files_per_process","max_files_per_process"},
//    {"max_function_args","max_function_args"},
//    {"max_identifier_length","max_identifier_length"},
//    {"max_index_keys","max_index_keys"},
//    {"max_locks_per_transaction","max_locks_per_xact"},
//    {"max_logical_replication_workers","max_logical_replication_workers"},
//    {"max_parallel_maintenance_workers","max_parallel_maintenance_workers"},
//    {"max_parallel_workers","max_parallel_workers"},
//    {"max_parallel_workers_per_gather","max_parallel_workers_per_gather"},
//    {"max_pred_locks_per_page","max_predicate_locks_per_page"},
//    {"max_pred_locks_per_relation","max_predicate_locks_per_relation"},
//    {"max_pred_locks_per_transaction","max_predicate_locks_per_xact"},
//    {"max_prepared_transactions","max_prepared_xacts"},
//    {"max_replication_slots","max_replication_slots"},
//    {"max_stack_depth","max_stack_depth"},
//    {"max_standby_archive_delay","max_standby_archive_delay"},
//    {"max_standby_streaming_delay","max_standby_streaming_delay"},
//    {"max_sync_workers_per_subscription","max_sync_workers_per_subscription"},
//    {"max_wal_senders","max_wal_senders"},
//    {"max_wal_size","max_wal_size_mb"},
//    {"max_worker_processes","max_worker_processes"},
//    {"min_parallel_index_scan_size","min_parallel_index_scan_size"},
//    {"min_parallel_table_scan_size","min_parallel_table_scan_size"},
//    {"min_wal_size","min_wal_size_mb"},
//    {"old_snapshot_threshold","old_snapshot_threshold"},
//    {"operator_precedence_warning","operator_precedence_warning"},
//    {"parallel_leader_participation","parallel_leader_participation"},
//    {"parallel_setup_cost","parallel_setup_cost"},
//    {"parallel_tuple_cost","parallel_tuple_cost"},
//    {"password_encryption","Password_encryption"},
//    {"port","PostPortNumber"},
//    {"post_auth_delay","PostAuthDelay"},
//    {"pre_auth_delay","PreAuthDelay"},
//    {"quote_all_identifiers","quote_all_identifiers"},
//    {"random_page_cost","random_page_cost"},
//    {"restart_after_crash","restart_after_crash"},
//    {"role","role_string"},
//    {"row_security","row_security"},
//    {"search_path","namespace_search_path"},
//    {"seed","phony_random_seed"},
//    {"segment_size","segment_size"},
//    {"seq_page_cost","seq_page_cost"},
//    {"server_encoding","server_encoding_string"},
//    {"server_version","server_version_string"},
//    {"server_version_num","server_version_num"},
//    {"session_authorization","session_authorization_string"},
//    {"session_preload_libraries","session_preload_libraries_string"},
//    {"session_replication_role","SessionReplicationRole"},
//    {"shared_buffers","NBuffers"},
//    {"shared_preload_libraries","shared_preload_libraries_string"},
//    {"ssl","EnableSSL"},
//    {"ssl_ca_file","ssl_ca_file"},
//    {"ssl_cert_file","ssl_cert_file"},
//    {"ssl_ciphers","SSLCipherSuites"},
//    {"ssl_crl_file","ssl_crl_file"},
//    {"ssl_dh_params_file","ssl_dh_params_file"},
//    {"ssl_ecdh_curve","SSLECDHCurve"},
//    {"ssl_key_file","ssl_key_file"},
//    {"ssl_passphrase_command","ssl_passphrase_command"},
//    {"ssl_passphrase_command_supports_reload","ssl_passphrase_command_supports_reload"},
//    {"ssl_prefer_server_ciphers","SSLPreferServerCiphers"},
//    {"ssl_renegotiation_limit","ssl_renegotiation_limit"},
//    {"standard_conforming_strings","standard_conforming_strings"},
//    {"statement_timeout","StatementTimeout"},
//    {"stats_temp_directory","pgstat_temp_directory"},
//    {"superuser_reserved_connections","ReservedBackends"},
//    {"synchronize_seqscans","synchronize_seqscans"},
//    {"synchronous_commit","synchronous_commit"},
//    {"synchronous_standby_names","SyncRepStandbyNames"},
//    {"syslog_facility","syslog_facility"},
//    {"syslog_ident","syslog_ident_str"},
//    {"syslog_sequence_numbers","syslog_sequence_numbers"},
//    {"syslog_split_messages","syslog_split_messages"},
//    {"tcp_keepalives_count","tcp_keepalives_count"},
//    {"tcp_keepalives_idle","tcp_keepalives_idle"},
//    {"tcp_keepalives_interval","tcp_keepalives_interval"},
//    {"temp_buffers","num_temp_buffers"},
//    {"temp_file_limit","temp_file_limit"},
//    {"temp_tablespaces","temp_tablespaces"},
//    {"TimeZone","timezone_string"},
//    {"timezone_abbreviations","timezone_abbreviations_string"},
//    {"trace_notify","Trace_notify"},
//    {"trace_recovery_messages","trace_recovery_messages"},
//    {"trace_sort","trace_sort"},
//    {"track_activities","pgstat_track_activities"},
//    {"track_activity_query_size","pgstat_track_activity_query_size"},
//    {"track_commit_timestamp","track_commit_timestamp"},
//    {"track_counts","pgstat_track_counts"},
//    {"track_functions","pgstat_track_functions"},
//    {"track_io_timing","track_io_timing"},
//    {"transaction_deferrable","XactDeferrable"},
//    {"transaction_isolation","XactIsoLevel_string"},
//    {"transaction_read_only","XactReadOnly"},
//    {"transform_null_equals","Transform_null_equals"},
//    {"unix_socket_directories","Unix_socket_directories"},
//    {"unix_socket_group","Unix_socket_group"},
//    {"unix_socket_permissions","Unix_socket_permissions"},
//    {"update_process_title","update_process_title"},
//    {"vacuum_cleanup_index_scale_factor","vacuum_cleanup_index_scale_factor"},
//    {"vacuum_cost_delay","VacuumCostDelay"},
//    {"vacuum_cost_limit","VacuumCostLimit"},
//    {"vacuum_cost_page_dirty","VacuumCostPageDirty"},
//    {"vacuum_cost_page_hit","VacuumCostPageHit"},
//    {"vacuum_cost_page_miss","VacuumCostPageMiss"},
//    {"vacuum_defer_cleanup_age","vacuum_defer_cleanup_age"},
//    {"vacuum_freeze_min_age","vacuum_freeze_min_age"},
//    {"vacuum_freeze_table_age","vacuum_freeze_table_age"},
//    {"vacuum_multixact_freeze_min_age","vacuum_multixact_freeze_min_age"},
//    {"vacuum_multixact_freeze_table_age","vacuum_multixact_freeze_table_age"},
//    {"wal_block_size","wal_block_size"},
//    {"wal_buffers","XLOGbuffers"},
//    {"wal_compression","wal_compression"},
//    {"wal_consistency_checking","wal_consistency_checking_string"},
//    {"wal_keep_segments","wal_keep_segments"},
//    {"wal_level","wal_level"},
//    {"wal_log_hints","wal_log_hints"},
//    {"wal_receiver_status_interval","wal_receiver_status_interval"},
//    {"wal_receiver_timeout","wal_receiver_timeout"},
//    {"wal_retrieve_retry_interval","wal_retrieve_retry_interval"},
//    {"wal_segment_size","wal_segment_size"},
//    {"wal_sender_timeout","wal_sender_timeout"},
//    {"wal_sync_method","sync_method"},
//    {"wal_writer_delay","WalWriterDelay"},
//    {"wal_writer_flush_after","WalWriterFlushAfter"},
//    {"work_mem","work_mem"},
//    {"xmlbinary","xmlbinary"},
//    {"xmloption","xmloption"},
//    {"zero_damaged_pages","zero_damaged_pages"},
};

class PostgresqlAnalyzer : public ModulePass {


  typedef struct usage_info {
    Instruction* inst;
    std::set<std::string> prev_configurations;
    std::set<Function *> prev_functions;
    std::set<Function *> succ_functions;
    std::set<std::string> succ_configurations;
  }UsageInfo;

  typedef std::pair<Instruction*, Function*> CallerRecord;

  template<typename T>
  void storeVariableUse(std::string configuration, T *variable);

  template<typename T>
  std::vector<Value *> getVariables(T *variable);

  bool runOnModule(Module &M) override;
  void getAnalysisUsage(AnalysisUsage &Info) const override;
  template<typename T>
  int getConfigurationInfo(T *variable);
  template<typename T>
  void handleVariableUse(T *variable);
  std::string getConfigurationName(std::string config_variable);

 public:
  std::map<std::string,std::vector<usage_info>> configurationUsages;
  std::map<Function*, std::map<std::string,std::vector<Instruction*>>> functionUsages;
  std::map<Function*, std::vector<CallerRecord>> callerGraph;
  std::map<Function*, std::vector<CallerRecord>> calleeGraph;
  std::vector<int> sysvar_offsets;
  static char ID; // Pass identification, replacement for typeid
  PostgresqlAnalyzer() : ModulePass(ID) {}

};


#endif //STATIC_ANALYZER_POSTGRESQL_CONFIG_H
